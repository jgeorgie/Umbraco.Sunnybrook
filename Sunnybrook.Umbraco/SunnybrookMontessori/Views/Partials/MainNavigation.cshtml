@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@{ var home = CurrentPage.Site(); }

@if (home.Children.Any())
{
    @* Get the first page in the children *@
    var naviLevel = home.Children.First().Level;
    
    @* Add in level for a CSS hook *@
    <ul class="nav navbar-nav" class="level-@naviLevel">  
		<li>
				<a href="@home.Url">Home</a>
		</li>
        @* For each child page under the home node *@
        @foreach (var childPage in home.Children)
        {   
            if (childPage.Children.Any())
            {                    
                <li class="has-child @(childPage.IsAncestorOrSelf(CurrentPage) ? "selected" : null)">
					@if(childPage.DocumentTypeAlias == "LandingPage" || childPage.DocumentTypeAlias=="parentsAccess") 
					{
                    	<span>@childPage.Name</span>
						@childPages(childPage.Children)
					} else {
						<a href="@childPage.Url">@childPage.Name</a>
					}
                </li>
            } 
			else
            {
				if(!childPage.umbracoNaviHide)
				{
					
					if(childPage.Name=="Login")
					{
						if(!Umbraco.MemberIsLoggedOn())
						{
							<li class="@(childPage.IsAncestorOrSelf(CurrentPage) ? "selected" : null)">
                    			<a href="@childPage.Url">@childPage.Name</a>
                  		 	</li>
						}
					}
					else
					{
						<li class="@(childPage.IsAncestorOrSelf(CurrentPage) ? "selected" : null)">
                    			<a href="@childPage.Url">@childPage.Name</a>
                  		 </li>
					}
						
					}
				}
				
                
        }
    </ul>
}

@helper childPages(dynamic pages)
{
    @* Ensure that we have a collection of pages *@
    if (pages.Any())
    {
        @* Get the first page in pages and get the level *@
        var naviLevel = pages.First().Level;
        
        @* Add in level for a CSS hook *@
        <ul class="sublevel level-@(naviLevel) other_hover">
            @foreach (var page in pages)
            {
				if (page.Children.Any())
				{
					<li class="has-child ">
                       <span>@page.Name</span>
						@childPages(page.Children)
                    </li>
				}
				else
				{
					<li class="@(page.IsAncestorOrSelf(CurrentPage) ? "selected" : null)">
						<a href="@page.Url">@page.Name</a>
					</li>	
				}
            }
        </ul>
    }
}